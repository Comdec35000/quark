{
  (import "operators")
  (import "test.js")

  (let every (fn (list predicate) {
    (let res true)
    (foreach list (fn (item) {
      (if (!= (predicate item) true) (return (set res false)))
    }))
    (return res)
  }))

  (let isList (fn (item) (= (type item) "list")))
  (let isContainer (fn (el) (every el isList)))

  (let head (fn (list) (index list 0)))
  
  (let object (fn (elements) elements))
  (let object:print (fn (obj tabs) {
    (if (= tabs none) { (set tabs 0) (print "{") } {})
    (let tabulations (list:concat (list:fill (list:create tabs) " ")))
    (if (isContainer obj) {
      (foreach obj (fn (el) {
        (object:print el (+ tabs 1))
      }))
    } {
      (if (isList (index obj 1)) {
        (print tabulations (index obj 0) "=> {")
        (object:print (index obj 1) (+ tabs 1))
        (print tabulations "}")
        (set tabs (- tabs 1))
        (return none)
      } {
        (print tabulations (index obj 0) "=>" (index obj 1))
        (return none)
      })
    })
    (print "}")
    (return none)
  }))
  
  (let object:get (fn (object property) {
    (let res none)
    (foreach object (fn (item) {
      (if (= (index item 0) property) (set res (index item 1)))
    }))
    (return res)
  }))

  (let object:set (fn (object property value) {
    (foreach object (fn (item) {
      (if (= (index item 0) property) (set (index item 1) value))
    }))
  }))
 
  (let ** pow)
  (let random:new (object [
    ["seed" (time:now)]
    ["j" (- (** 2 31) 1)]
    ["k" 16807]
    ["period" (** 2 30)]
  ]))
  (let random (fn (min max) {
    (let seed (object:get random:new "seed"))
    (let j (object:get random:new "j"))
    (let k (object:get random:new "k"))
    (let period (object:get random:new "period"))

    (object:set random:new "seed" (% (* k seed) j))

    (set seed (object:get random:new "seed"))
    (let toret (+ (* (- max min) (/ seed j)) min))
    (object:set random:new "period" (- period 1))
    (if (= (object:get random:new "period") 0) {
      (object:set random:new "period" (** 2 30))
    })
    (return toret)
  }))
  (let obj (json_parse "{ \"eheh\": \"yolo\", \"test\": { \"test\": 17 } }"))
  (object:print obj)
  (let ob (object [
    ["welcome" (fn (username) {
      (print "Hello" username)
    })]
  ]))
  ((object:get ob "welcome") "test")
  (callback (fn (username test) {
    (print "test" username test)
  }))

  (let functors [
    (fn (x) (+ x 5))
    (fn (x) (* x 5))
  ])

  (let fmap (fn (fnArray array) {
    (let result [])
    (foreach array (fn (el) {
      (let tmp el)
      (foreach fnArray (fn (function) {
        (set tmp (function tmp))
      }))
      (push result tmp)
    }))
    (return result)
  }))

  (print (fmap functors [1 2 3 4]))
}