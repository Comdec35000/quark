(defm const [name value]
  (defm name value))
  
(defm || or)
(defm && and)
(defm ... [x] ...x)

(defm not [x] 
  (if (= x 1) 0 1))
(defm <= [x y] 
  (not (> x y)))
(defm >= [x y] 
  (or (> x y) (= x y)))
(defm < [x y] 
  (not (>= x y)))
(defn . [f g x] 
  (f (g x)))

(defm defn [name args body]
  (let name (fn args body)))

(let test (fn [x y]
  (fn [z]
    (if (= x y) 1 (test (- x z))))))

(let main (fn [x] {
  (let a (input 5))
  (print ((test 5) a))
}))
 
(main)