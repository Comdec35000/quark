(defm const [name value]
  (defm name value))

(import "path.qrk")

(defm defn [name args body]
  (let name (fn args body)))

(print (facto 5))
(defm || or)
(defm && and)
(defm ... [x] ...x)

(defm not [x] 
  (if (= x 1) 0 1))
(defm <= [x y] 
  (not (> x y)))
(defm >= [x y] 
  (or (> x y) (= x y)))
(defm < [x y] 
  (not (>= x y)))
(defn . [f g x] 
  (f (g x)))

(defn add [x]
  (fn [y] (+ x y)))

(print (... [5 2 3]))

