(defm const [name value]
  (defm name value))

(defm defn [name args body]
  (let name (fn args body)))



(defm || or)
(defm && and)

(defm not [x] (if (= x 1) 0 1))
(defm <= [x y] (not (> x y)))
(defm >= [x y] (or (> x y) (= x y)))
(defm < [x y] (not (>= x y)))

(defn . [f g x] (f (g x)))

(defn add [x]
  (fn [y] (+ x y)))

(print ((add 5) 2))
